package ie.dit.britton.darren.android;

import ie.dit.britton.darren.business.Basket;
import ie.dit.britton.darren.business.OrderLine;
import ie.dit.britton.darren.business.User;
import ie.dit.britton.darren.android.R;

import java.io.File;

import java.io.OutputStreamWriter;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TableRow.LayoutParams;
import android.widget.TextView;
import android.widget.Toast;

@SuppressWarnings("unused")
@SuppressLint("WorldReadableFiles")
public class CheckoutView extends ActionBarActivity
{

	Basket basket;
	Button checkout;
	Button modifyCart;
	TableLayout purchasesTable;
	TableRow purchase;
	NumberFormat currency;
	String mailBody;

	@SuppressWarnings("deprecation")
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.checkout_view);
		/**
		 * Modify Cart simply finishing the current checkout intent, returning
		 * to the shopping list intent
		 */
		modifyCart = (Button) findViewById(R.id.modifyCart);
		modifyCart.setOnClickListener(new OnClickListener() {
			public void onClick(View view)
			{
				finish();
			}
		});

		final Calendar calendar = Calendar.getInstance();
		final SimpleDateFormat dateFormat = new SimpleDateFormat(
				"dd-MM-yyyy-HH:mm:ss", Locale.UK);

		checkout = (Button) findViewById(R.id.checkout);
		checkout.setOnClickListener(new OnClickListener() {
			public void onClick(View view)
			{

				/**
				 * async task used to keep the ui responsive on slower phones. A
				 * thread might have been more suitable here, so the
				 * implementation is mostly academic ( hence the excessive
				 * voiding )
				 */
				class SendEmail extends AsyncTask<Void, Void, Void>
				{
					@Override
					protected Void doInBackground(Void... params)
					{

						OutputStreamWriter outputStream;
						String currTime = dateFormat.format(calendar.getTime());
						String fileName = "shopping-list" //+ currTime
								+ ".html";
						/**
						 * writes the generated html to a file in the
						 * applications temporary directory
						 */
						try
						{
							outputStream = new OutputStreamWriter(
									openFileOutput(fileName,
											Context.MODE_WORLD_READABLE));
							outputStream.write(mailBody);
							outputStream.close();
						} catch (Exception e)
						{
							e.printStackTrace();
						}

						String to = User.getInstance().getEmail();
						String subject = "Personalised Shopping List Created on "
								+ currTime;

						/**
						 * creates a new email intent that sends the file and
						 * email contents to a mail client of the users choosing
						 */
						Intent email = new Intent(Intent.ACTION_SEND);
						email.putExtra(Intent.EXTRA_EMAIL, new String[] { to });
						email.putExtra(Intent.EXTRA_SUBJECT, subject);
						email.putExtra(Intent.EXTRA_TEXT,
								"Please open the attached file for your shopping list");
						/**
						 * gets the file from the applications temporary
						 * directory
						 */
						File file;
						try
						{
							file = new File(getBaseContext().getFilesDir()
									+ "/" + fileName);
						} catch (Exception e)
						{
							e.printStackTrace();
							Toaster.makeToast("File not Found",
									getBaseContext());
							return null;
						}

						/**
						 * adds the file to the action send intent as an
						 * attachment
						 */
						Uri uri = Uri.fromFile(file);
						email.putExtra(Intent.EXTRA_STREAM, uri);

						email.setType("message/rfc822");

						startActivity(Intent.createChooser(email,
								"Choose an Email client :"));

						return null;
					}
				}

				new SendEmail().execute();
				Toaster.makeToast("Transaction Completed", getBaseContext());

			}
		});

		currency = NumberFormat.getCurrencyInstance(Locale.ITALY);

		/**
		 * Retrieves the starting html ,e.g. the html,head,body and start of
		 * table tags, from the strings.xml file
		 */
		mailBody = getResources().getString(R.string.htmlStart);

		basket = Basket.getInstance();
		purchasesTable = (TableLayout) findViewById(R.id.purchases);
		/**
		 * creates a layout object to be applied to each entry in the table
		 */
		LayoutParams layoutParams = new LayoutParams(LayoutParams.MATCH_PARENT,
				LayoutParams.WRAP_CONTENT);

		OrderLine[] purchases = basket.getPurchases();

		for (OrderLine p : purchases)
		{
			/**
			 * for each item in the orderline, we add the values to a new table
			 * row (purchase). as well as setting the value for each textfield
			 * we add, we also append a the html for each row to the mailBody
			 * string
			 */
			if (p.getQuantity() > 0)
			{
				mailBody += "<tr>";
				purchase = new TableRow(this);
				purchase.setLayoutParams(layoutParams);
				TextView name = new TextView(this);
				TextView quantity = new TextView(this);
				TextView VAT = new TextView(this);
				TextView price = new TextView(this);
				TextView total = new TextView(this);
				name.setText(p.getName());
				mailBody += "<td>" + p.getName() + "</td>";
				quantity.setText(String.valueOf(p.getQuantity()));
				mailBody += "<td>" + String.valueOf(p.getQuantity()) + "</td>";
				VAT.setText(String.valueOf(currency.format(p.getVat())));
				mailBody += "<td>"
						+ String.valueOf(currency.format(p.getVat())) + "</td>";
				price.setText(String.valueOf(currency.format(p.getPrice())));
				mailBody += "<td>"
						+ String.valueOf(currency.format(p.getPrice()))
						+ "</td>";
				total.setText(String.valueOf(currency.format(p.getTotal())));
				mailBody += "<td>"
						+ String.valueOf(currency.format(p.getTotal()))
						+ "</td>";
				mailBody += "</tr>";
				name.setLayoutParams(layoutParams);
				quantity.setLayoutParams(layoutParams);
				VAT.setLayoutParams(layoutParams);
				price.setLayoutParams(layoutParams);
				total.setLayoutParams(layoutParams);
				purchase.addView(name);
				purchase.addView(quantity);
				purchase.addView(VAT);
				purchase.addView(price);
				purchase.addView(total);
				purchasesTable.addView(purchase);
			}
		}
		/**
		 * Once all rows have been added, the mail body and the table are
		 * appended with the total and finally appended with end html to
		 * complete the html table in mailBody
		 */
		mailBody += "<tfoot> <td></td><td></td><td></td><td></td>";
		purchase = new TableRow(this);
		purchase.setLayoutParams(layoutParams);
		TextView name = new TextView(this);
		TextView quantity = new TextView(this);
		TextView VAT = new TextView(this);
		TextView price = new TextView(this);
		TextView total = new TextView(this);
		total.setText(String.valueOf(currency.format(basket.getTotal())));
		mailBody += "<td><b>"
				+ String.valueOf(currency.format(basket.getTotal()))
				+ "</td></b>";
		mailBody += getResources().getString(R.string.htmlEnd);
		layoutParams.setMargins(0, 5, 0, 0);
		name.setLayoutParams(layoutParams);
		quantity.setLayoutParams(layoutParams);
		VAT.setLayoutParams(layoutParams);
		price.setLayoutParams(layoutParams);
		total.setLayoutParams(layoutParams);
		purchase.addView(name);
		purchase.addView(quantity);
		purchase.addView(VAT);
		purchase.addView(price);
		purchase.addView(total);
		// tr.setBackgroundResource(R.drawable.sf_gradient_03);
		purchasesTable.addView(purchase);
	}
}