package ie.dit.britton.darren.shoppinglist;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.ListActivity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.TextView;

public class ShoppingListView extends ListActivity
{
	
	private Basket basket = Basket.getInstance();
	private NumberFormat currency;
	ShoppingListAdapter adapter;
	
	static class ViewHolder
	{
		TextView tvName;
		TextView tvPrice;
		TextView tvQuantity;
		Button tvDescription;
		Button tvPlus;
		Button tvMinus;
	}
	
	@SuppressLint("ViewHolder")
	public class ShoppingListAdapter  extends ArrayAdapter<Item> implements Filterable
	{
		Context context;
		List<Item> values;
		LayoutInflater shoppingListInflater;
		int textViewResourceId;
		int priceResourceId;
		int descriptionResourceId;
		int plusResourceId;
		int minusResourceId;
		int quantityResourceId;
		
		ItemFilter shoppingListFilter = new ItemFilter();
	    List<Item>originalData;
	    List<Item>filteredData;
		
		public ShoppingListAdapter(Context context,int resource,int textViewResourceId,
				int priceResourceId, int descriptionResourceId, int plusResourceId, int minusResourceId, int quantityResourceId,List<Item> values)
		{
			super(context,resource,textViewResourceId,values);
			
			shoppingListInflater = LayoutInflater.from(context);
			
			this.textViewResourceId = textViewResourceId;
			this.priceResourceId = priceResourceId;
			this.descriptionResourceId = descriptionResourceId;
			this.plusResourceId = plusResourceId;
			this.minusResourceId = minusResourceId;
			this.quantityResourceId = quantityResourceId;
			this.context = context;
			this.values = values;
			
			filteredData = values;
	        originalData = values;
		}
		

	    public int getCount() {
	        return filteredData.size();
	    }

	    public Item getItem(int position) {
	        return filteredData.get(position);
	    }

	    public long getItemId(int position) {
	        return position;
	    }

		@Override
		public View getView(final int position,  View view, ViewGroup parent)
		{
			View vi = view; 
			ViewHolder holder = null;
			
		    if (vi == null)
		    {
		        vi = shoppingListInflater.inflate(R.layout.row, parent, false);
		        holder = new ViewHolder();
		        
		        holder.tvName = (TextView) vi.findViewById(textViewResourceId);
		        holder.tvPrice = (TextView) vi.findViewById(priceResourceId);
		        holder.tvDescription = (Button) vi.findViewById(descriptionResourceId);
		        holder.tvPlus = (Button) vi.findViewById(plusResourceId);
		        holder.tvMinus = (Button) vi.findViewById(minusResourceId);
		        holder.tvQuantity =  (TextView) vi.findViewById(quantityResourceId);
		        vi.setTag(holder);
		    }
		    else
		    {
		    	holder = (ViewHolder) vi.getTag();
		    }
		    
	        final Item item = filteredData.get(position);
	        holder.tvName.setText(item.getName());
	        holder.tvPrice.setText(currency.format(item.getPrice()));
	        
	        final ViewHolder viewHolderFinal = holder;
	        
	        if (basket.contains(item))
	        {
	        	holder.tvQuantity.setText(String.valueOf(basket.findItem(item).getQuantity()));
	        }
	        else
	        {
	        	holder.tvQuantity.setText("0");
	        }
	        
	        holder.tvDescription.setOnClickListener(
    		 new OnClickListener()
             {
                 public void onClick(View view)
                 {
             		new AlertDialog.Builder(getContext())
             	    .setTitle("Description of " + item.getName() + ":")
             	    .setMessage(item.getDescription())
             	    .setNeutralButton("close", new DialogInterface.OnClickListener() {
             	        public void onClick(DialogInterface dialog, int which) { 
             	        	dialog.cancel();
             	        }
             	     })
             	     .show();
                 }
             });
	        
			holder.tvPlus.setOnClickListener(
               new OnClickListener()
               {
                   public void onClick(View view)
                   {
						OrderLine orderline = basket.findItem(item);
						
						if(basket.getRemainingBudget() <= orderline.getPrice())
						{
							Display.makeToast("Cannot Excede Budget \n" + currency.format(basket.getRemainingBudget())
								+ " Remaining", context);
						}
						else
						{
							if (orderline.getQuantity() == -1.0)
							{
						   		orderline.setQuantity(orderline.getQuantity() + 2);
						   		basket.addItem(orderline);
							}
							else
							{
						   		orderline.setQuantity(orderline.getQuantity() + 1);
							}
							
					   		Display.makeToast(currency.format(basket.getRemainingBudget()),context);
							viewHolderFinal.tvQuantity.setText(String.valueOf(orderline.getQuantity()));
						}
                   }
               });
			
			holder.tvMinus.setOnClickListener(
               new OnClickListener()
               {
                   public void onClick(View view)
                   {
               		OrderLine orderline = basket.findItem(item);
	               		
               		if (orderline.getQuantity() > 0)
               		{
	               		orderline.setQuantity(orderline.getQuantity() - 1);
	               		viewHolderFinal.tvQuantity.setText(String.valueOf(orderline.getQuantity()));
	               		Display.makeToast(currency.format(basket.getRemainingBudget()), context);
               		}	               		
                  }
               }
			);
		        
	        return vi;
		}
		
	    public Filter getFilter() {
	    	//Display.makeToast(String.valueOf(filteredData.size()), context);
	        return shoppingListFilter;
	    }
		
		private class ItemFilter extends Filter {
	        @SuppressLint("DefaultLocale")
			@Override
	        protected FilterResults performFiltering(CharSequence constraint) {

	            String needle = constraint.toString().toLowerCase();

	            FilterResults results = new FilterResults();

	            int count = originalData.size();
	            final ArrayList<Item> matchList = new ArrayList<Item>();

	            String haystack;

	            for (int i = 0; i < count; i++) {
	            	Item item = originalData.get(i);
	                haystack = item.getName();
	                if (haystack.toLowerCase().contains(needle)) {
	                    matchList.add(item);
	                }
	            }

	            results.values = matchList;
	            results.count = matchList.size();

	            return results;
	        }

	        @SuppressWarnings("unchecked")
	        @Override
	        protected void publishResults(CharSequence constraint, FilterResults results) {
	            filteredData = (ArrayList<Item>) results.values;
	            notifyDataSetChanged();
	        }

	}
}
		
	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.shopping_list_view); 
        
        Button checkout = (Button)findViewById(R.id.checkout);
        checkout.setOnClickListener(
                new OnClickListener()
                {
                    public void onClick(View view)
                    {
                		checkout();
                    }
                });
        
        
        Store store = Store.getInstance();
        currency = NumberFormat.getCurrencyInstance(Locale.ITALY);
        adapter = new ShoppingListAdapter(this,R.layout.row,R.id.item,R.id.price, R.id.description,R.id.plus,R.id.minus,R.id.quantity,store.getItemsAsArray());
        setListAdapter(adapter);
        
        EditText search = (EditText) findViewById(R.id.searchField);
        
        search.addTextChangedListener(new TextWatcher(){
			public void afterTextChanged(Editable s) {}
			public void beforeTextChanged(CharSequence s, int start, int count, int after){}
			public void onTextChanged(CharSequence s, int start, int before, int count)
            {
            	 adapter.getFilter().filter(s);
            }
        });
    }
    
    
    private void checkout()
    {
		Intent intent = new Intent(ShoppingListView.this,CheckoutView.class);
		startActivity(intent);
    }
}
